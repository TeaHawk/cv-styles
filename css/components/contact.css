class ContactManager {
    constructor() {
        this.container = document.querySelector('.contact-entries');
        this.currentLang = localStorage.getItem('language') || 'fr';
        this.init();
    }

    init() {
        // Ensure DOM is fully loaded before initializing
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupContactManager());
        } else {
            this.setupContactManager();
        }
    }

    setupContactManager() {
        // Find the container, with fallback
        if (!this.container) {
            console.error('Contact entries container not found. Create a div with class "contact-entries".');
            return;
        }

        // Initial render
        this.renderContacts(this.currentLang);

        // Language change event listener
        document.addEventListener('languageChanged', (e) => {
            if (e.detail.language !== this.currentLang) {
                this.currentLang = e.detail.language;
                this.updateContacts(this.currentLang);
            }
        });
    }

    renderContacts(lang) {
        try {
            // Clear previous content
            this.container.innerHTML = '';
            
            // Generate and insert HTML
            const contactsHTML = this.generateContactsHTML(lang);
            this.container.innerHTML = contactsHTML;

            // Add animations
            requestAnimationFrame(() => {
                this.container.classList.add('visible');
                this.addHoverEffects();
            });
        } catch (error) {
            console.error('Error rendering contacts:', error);
        }
    }

    updateContacts(lang) {
        try {
            // First fade out
            this.container.classList.add('fade-out');
            
            setTimeout(() => {
                // Update content while faded out
                const contactsHTML = this.generateContactsHTML(lang);
                this.container.innerHTML = contactsHTML;
                
                // Remove fade out and let entry animations play
                this.container.classList.remove('fade-out');
                this.addHoverEffects();
            }, 300); // Matches the CSS transition duration
        } catch (error) {
            console.error('Error updating contacts:', error);
        }
    }

    generateContactsHTML(lang) {
        const header = translations[lang].header;
        
        return `
            <div class="contact-grid">
                <a href="https://www.linkedin.com/in/daniel-izmailov-clauzel/" 
                   class="contact-entry" 
                   target="_blank" 
                   rel="noopener noreferrer"
                   itemscope 
                   itemtype="http://schema.org/Person">
                    <div class="contact-frame">
                        <div class="frame-line top"></div>
                        <div class="frame-line right"></div>
                        <div class="frame-line bottom"></div>
                        <div class="frame-line left"></div>
                    </div>
                    <div class="contact-content">
                        <span class="contact-icon">üìé</span>
                        <span class="contact-text" itemprop="sameAs">LinkedIn</span>
                    </div>
                </a>

                <a href="https://github.com/TeaHawk" 
                   class="contact-entry" 
                   target="_blank" 
                   rel="noopener noreferrer"
                   itemscope 
                   itemtype="http://schema.org/Person">
                    <div class="contact-frame">
                        <div class="frame-line top"></div>
                        <div class="frame-line right"></div>
                        <div class="frame-line bottom"></div>
                        <div class="frame-line left"></div>
                    </div>
                    <div class="contact-content">
                        <span class="contact-icon">üíª</span>
                        <span class="contact-text" itemprop="sameAs">GitHub</span>
                    </div>
                </a>

                <a href="mailto:${header.contact.email.split(' ')[1]}" 
                   class="contact-entry" 
                   itemscope 
                   itemtype="http://schema.org/Person">
                    <div class="contact-frame">
                        <div class="frame-line top"></div>
                        <div class="frame-line right"></div>
                        <div class="frame-line bottom"></div>
                        <div class="frame-line left"></div>
                    </div>
                    <div class="contact-content">
                        <span class="contact-icon">‚úâÔ∏è</span>
                        <span class="contact-text" itemprop="email">${header.contact.email}</span>
                    </div>
                </a>

                <a href="tel:${header.contact.phone.split(' ')[1].replace(/ /g, '')}" 
                   class="contact-entry" 
                   itemscope 
                   itemtype="http://schema.org/Person">
                    <div class="contact-frame">
                        <div class="frame-line top"></div>
                        <div class="frame-line right"></div>
                        <div class="frame-line bottom"></div>
                        <div class="frame-line left"></div>
                    </div>
                    <div class="contact-content">
                        <span class="contact-icon">üì±</span>
                        <span class="contact-text" itemprop="telephone">${header.contact.phone}</span>
                    </div>
                </a>
            </div>
        `;
    }

    addHoverEffects() {
        const entries = this.container.querySelectorAll('.contact-entry');
        
        entries.forEach(entry => {
            // Ensure only one set of event listeners
            entry.removeEventListener('mouseenter', this.handleMouseEnter);
            entry.removeEventListener('mouseleave', this.handleMouseLeave);

            // Add new event listeners
            entry.addEventListener('mouseenter', () => {
                entry.classList.add('entry-hover');
            });

            entry.addEventListener('mouseleave', () => {
                entry.classList.remove('entry-hover');
            });
        });
    }
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', () => {
    window.contactManager = new ContactManager();
});
